# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fbrow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtWebEngineWidgets import *

# class TabWidget(QTabWidget):
#     def __init__(self):
#         QTabWidget.__init__(self)
#         url = QUrl("https://www.baidu.com")
#         view = NewQWebEngineView(self)
#         view.load(url)
#         index = self.addTab(view, " ...")


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(801, 604)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        # self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setTabsClosable(True)
        self.tabWidget.setTabBarAutoHide(False)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tabWidget.addTab(self.tab_2, "")
        self.gridLayout.addWidget(self.tabWidget, 1, 0, 1, 1)
        # self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.textEdit.setMaximumSize(QtCore.QSize(16777000, 25))
        self.textEdit.setObjectName("textEdit")
        self.gridLayout.addWidget(self.textEdit, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 801, 23))
        self.menuBar.setObjectName("menuBar")
        self.menuFuccy = QtWidgets.QMenu(self.menuBar)
        self.menuFuccy.setObjectName("menuFuccy")
        MainWindow.setMenuBar(self.menuBar)
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionSettings = QtWidgets.QAction(MainWindow)
        self.actionSettings.setObjectName("actionSettings")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionExit_2 = QtWidgets.QAction(MainWindow)
        self.actionExit_2.setObjectName("actionExit_2")
        self.menuFuccy.addAction(self.actionAbout)
        self.menuFuccy.addAction(self.actionSettings)
        self.menuFuccy.addSeparator()
        self.menuFuccy.addAction(self.actionExit_2)
        self.menuBar.addAction(self.menuFuccy.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "FuccyBrowser"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Tab 1"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Tab 2"))
        self.menuFuccy.setTitle(_translate("MainWindow", "Fuccy"))
        self.actionAbout.setText(_translate("MainWindow", "关于"))
        self.actionSettings.setText(_translate("MainWindow", "设置"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit_2.setText(_translate("MainWindow", "退出"))


class NewQWebEngineView(QWebEngineView, Ui_MainWindow):
    def __init__(self,*args):
        super(NewQWebEngineView, self).__init__()
        # QWebEngineView.__init__(self,*args)
        # self.tab = self.parent()
 
    def createWindow(self, windowType):
        return self
 
class MyBrowser(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(MyBrowser, self).__init__()
        self.setupUi(self)
        # 清除原有的两个标签
        self.tabWidget.clear()
 
        self.url = 'file:///./newtab.html'
        # 初始化
        self.new_tab(QUrl(self.url))
        self.textEdit.returnPressed.connect(self.toNewUrl)
        self.tabWidget.tabCloseRequested.connect(self.onTabClose)
        self.actionAbout.triggered.connect(self.openAbout)
        self.actionSettings.triggered.connect(self.openSettings)

    def new_tab(self, url):
        # 为标签创建新网页
        browser = NewQWebEngineView()
        browser.setUrl(url)
 
        # 添加标签,返回索引
        _index = self.tabWidget.addTab(browser, url.url())
 
        # 加载完成之后将标签标题修改为网页相关的标题
        browser.loadFinished.connect(lambda: self.set_tab_title(_index, browser))
 
    def set_tab_title(self, index, browser):
        self.tabWidget.setTabText(index, browser.page().title())

    def openAbout(self):
        self.new_tab(QUrl("file:///./about.html"))
    def openSettings(self):
        # self.new_tab(QUrl("file:///./settings.html"))

        QMessageBox.warning(self,'FuccyBrowser','开发中，敬请期待(*^_^*)', QMessageBox.Yes)
    def toNewUrl(self):
        # print("It worked!")
        turl = self.textEdit.text()
        print(turl)

        header_Http = "http://"
        header_Https = "https://"
        header_Fuccy = "fuccy://"
        res_Http = header_Http in turl
        res_Https = header_Https in turl
        res_Fuccy = header_Fuccy in turl
        if (res_Http == True):
            pass
        else:
            if(res_Https == True):
                pass
            else:
                if (res_Fuccy == True):
                    fuccyurl = turl.split('/')
                    print(fuccyurl)
                    if(fuccyurl[2] == "newtab"):
                        turl="file:///./newtab.html"
                    elif(fuccyurl[2] == "about"):
                        turl="file:///./about.html"
                else:
                    turl = "http://"+turl

        self.new_tab(QUrl(turl))

    def onTabClose(self,index):
        if index>0:
            self.tabWidget.removeTab(index)
        else:
            lastTabReply = QMessageBox.warning(self,'FuccyBrowser','关闭最后一个标签页程序会同时关闭，继续吗？', QMessageBox.Yes|QMessageBox.No,QMessageBox.No)
            if lastTabReply == QMessageBox.Yes:
                sys.exit(app.exec_())
            else:
                pass

if __name__ == '__main__':
    import sys
    from PyQt5.QtWidgets import QApplication
    import os, inspect
    # Over Load
    current_path=inspect.getfile(inspect.currentframe())
    dir_name=os.path.dirname(current_path)
    file_abs_path=os.path.abspath(dir_name)
    # list_path=os.path.split(file_abs_path)
    print(file_abs_path)
    os.chdir(file_abs_path+"\\Fuccy_Data")
    app = QApplication(sys.argv)
    my_browser = MyBrowser()
    my_browser.show()
    app.exec_()